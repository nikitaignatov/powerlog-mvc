@using System.Globalization
@using System.Text.RegularExpressions
@using PowerLog.Model
@model IEnumerable<PowerLog.Model.LoggedExercise>

@{
    ViewBag.Title = "Index";
    var title = new Func<string, IEnumerable<LoggedExercise>, string>(
        (string a, IEnumerable<LoggedExercise> e) =>
        string.Format("{0}{1} workout", string.IsNullOrWhiteSpace(a) ? "" : a + " - ",
        string.Join(", ", e.GroupBy(x => x.Exercise.BodyPart).OrderByDescending(x => x.Sum(y => y.Load)).Select(x => x.Key).Take(3))
        ));



    var list = Model.GroupBy(x => x.ExerciseID);
    var calls = new List<string>();
    foreach (var logs in list)
    {
        var reps = new List<int>();
        var weight = new List<string>();
        var max = new List<string>();
        var load = new List<string>();
        foreach (var log in logs)
        {
            reps.Add(log.Reps);
            if (log.FailedToLift)
            {
                weight.Add(string.Format(@"{{y:{0},marker: {{symbol: 'url(http://www.bloodsystemseducation.org/resources/images/icons/icon_fail.gif)'}} }}", log.Weight.ToString(CultureInfo.InvariantCulture)));
            }
            else
            {
                weight.Add(log.Weight.ToString(CultureInfo.InvariantCulture));
            }
            max.Add(log.OneRepMax.ToString(CultureInfo.InvariantCulture));
            load.Add(log.Load.ToString(CultureInfo.InvariantCulture));
        }
        var call = string.Format("renderChart({0},[{1}],[{2}],[{3}], [{4}]);",
            logs.Key,
            string.Join(",", reps),
            string.Join(",", weight),
            string.Join(",", max),
            string.Join(",", load));
        calls.Add(call);
    }
}


@section Scripts {
    @Scripts.Render("~/bundles/jqueryui")
    <script src="/Scripts/js/highcharts.js" type="text/javascript"></script>
    <script src="/Scripts/jquery.nanoscroller.min.js"></script>
    @* @{
        var id = 397;
        var list = Model.Where(x => x.ExerciseID == id).GroupBy(x => x.Date.Date).OrderBy(x => x.Key);
        var denug = list.SelectMany(x => x).ToList();
        var dates = list.Select(x => x.Key).ToList();
        var _avg = list.Select(x => x.Average(a => a.Weight)).ToList();
        var _max = list.Select(x => x.Max(a => a.OneRepMax)).ToList();
        var _load = list.Select(x => x.Sum(a => a.Load)).ToList();
        var max = string.Join(",", _max.Zip(dates.Select(x => x.AddMonths(-1).ToString("yyyy, MM, dd")), (a, b) => string.Format("[Date.UTC({1}),{0}]", a, b)));
        var avg = string.Join(",", _avg.Zip(dates.Select(x => x.AddMonths(-1).ToString("yyyy, MM, dd")), (a, b) => string.Format("[Date.UTC({1}),{0}]", a, b)));
        var load = string.Join(",", _load.Zip(dates.Select(x => x.AddMonths(-1).ToString("yyyy, MM, dd")), (a, b) => string.Format("[Date.UTC({1}),{0}]", a, b)));

        var name = list.SelectMany(x => x).FirstOrDefault(x => x.ExerciseID == id).Exercise.Name;
    }*@
    <script type="text/javascript">
        $(function () {
            $(".nano").nanoScroller();
        });
    </script>
}
<style>
    .nano {
        box-shadow: 0 0 15px rgba(0,0,0,0.2);
        width: 500px;
        height: 400px;
    }

        .nano .container {
            padding: 10px;
        }

        .nano .pane {
            background: #888;
        }

        .nano .slider {
            background: #111;
        }
</style>
<div class="container">
    <div class="row-fluid nano">
        <div class="content">
            <table class="table  table-hover">
                @foreach (var date in Model.GroupBy(x => x.Date).OrderByDescending(x => x.Key))
                {
                    var summary = date.AsEnumerable().Summarize();
                    <tr>
                        <td><span class="pull-right">@date.Key.ToShortDateString()</span>
                            <h3>@Html.RouteLink(title("", date), "LogDetails", new { year = date.Key.Year, month = date.Key.Month, day = date.Key.Day, title = Regex.Replace(title("", date).ToLower(), @"\s+|,|\.", "-").Replace("--", "-") }, null) </h3>
                            <div class="row-fluid">
                                <h2 class="span2">@summary.TotalReps</h2>
                                <h2 class="span2">@summary.TotalVolume.ToString("#,0")</h2>
                                <h2 class="span2">@summary.AverageReps.ToString("#.0")</h2>
                            </div>
                            <div class="row-fluid">
                                <span class="span1">lifts</span>
                                <span class="span1">load</span>
                                <span class="span1">avg. reps</span>
                            </div>
                        </td>
                    </tr>@*
        foreach (var exercises in date.GroupBy(x => x.Exercise))
        {
        <tr>
            <th colspan="7">
                @exercises.Key.Name
            </th>
        </tr>
        <tr>
            <th>reps
            </th>
            <th>weight</th>
            <th>1 Rep Max</th>
            <th>load</th>
            <th>remarks</th>
            <th>notes</th>
            <th></th>
        </tr>
            foreach (var item in exercises)
            {
        <tr>
            <td align="right">
                @Html.DisplayFor(modelItem => item.Reps)
            </td>
            <td>
                <strong>@Html.DisplayFor(modelItem => item.Weight)</strong>kg
            </td>
            <td>

                <strong>@(item.OneRepMax)</strong>kg
            </td>
            <td>
                <strong>@(item.Weight * item.Reps)</strong>kg
            </td>
            <td>
                @if (item.FailedToLift)
                {
                    <span class="label label-important">Failed to lift</span>
                }
                @if (item.MaxEffort)
                {
                    
                    <span class="label label-success">Max effort</span>
                }
                @if (item.ToFailure)
                {
                    
                    <span class="label label-important">To Failure</span>
                }
            </td>
            <td>
                @if (!string.IsNullOrWhiteSpace(item.Comment))
                {
                    <button class="comment btn btn-mini" data-content="@item.Comment" data-title="Note:"><i class="icon-comment"></i></button>
                }
            </td>
            <td>
                @Html.ActionLink("Edit", "Edit", new { id = item.ID }, new { @class = "btn btn-mini" }) |
                                        @Html.ActionLink("Details", "Details", new { id = item.ID }) |
                                        @Html.ActionLink("Delete", "Delete", new { id = item.ID })
            </td>
        </tr>
            }
        <tr style="color: #aaa;">
            <td colspan="3">[<strong>@exercises.Sum(x => x.Reps)</strong> lifts] 
            </td>
            <td colspan="4">[<strong>@exercises.Sum(x => x.Weight * x.Reps)kg</strong> total load]
            </td>
        </tr>
        }*@
                }

            </table>
        </div>
    </div>
</div>
