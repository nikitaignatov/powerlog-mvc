@model IEnumerable<PowerLog.Model.LoggedExercise>

@{
    ViewBag.Title = "Index";
}


@section Scripts {
    @Scripts.Render("~/bundles/jqueryui")
    <script src="/Scripts/js/highcharts.js" type="text/javascript"></script>
    <script id="previewTemplate" type="text/x-jquery-tmpl">
        <tr class="title">
            <td>${Exercise} 
            </td>
            <td>[
                    {{each Sets}}
                    <strong>${Reps}</strong><small>x</small><strong>${Weight}</strong>kg
                                            
                ${Comment}
                {{if FailedToLift}}  
                <span class="label label-important">failed</span>
                {{/if}} 
                {{if MaxEffort}}  
                      <span class="label label-success">max</span>
                {{/if}} 
                {{if ToFailure}}  
                      <span class="label label-important">to failure</span>
                {{/if}} 
                   
                    {{/each}}
                ]
            </td>
        </tr>
    </script>
    <script type="text/javascript">
        function GetDate(jsonDate) {
            var value = new Date(parseInt(jsonDate.substr(6)));
            return value.getMonth() + 1 + "/" + value.getDate() + "/" + value.getFullYear();
        }
        function getPreview(date, exrp) {
            $.ajax({
                dataType: "json",
                url: "/LoggedExercise/PreviewLog?date=" + date + "&expression=" + exrp,
                success: function (data) {
                    $("#preview").html('');
                    $("#previewTemplate").tmpl(data)
                        .appendTo("#preview");
                }
            });
        }

        $("#preview").html('');
        var expr = $("#expression");
        expr.keyup(function (e) {
            var date = $("#Date").val();
            var expr = $(this).val();
            console.log();
            if ((e.keyCode || e.which) == 189) {
                $('#expression').popover('show');
            } else {
                $('#expression').popover('hide');
                getPreview(date, expr);
            }
        });

        expr.typeahead({
            items: 15,
            matcher: function (item) {
                return true;
            },
            source: function (query, process) {
                function test(query) {
                    return !/\d/.test(query) && ($.trim(query) === query.toString());
                }

                if (test(query)) {
                    return $.get('/exercise/get', { q: query }, function (data) {
                        return process(data);
                    });
                } else if (query.indexOf(";\n") != -1) {
                    var e = query.split(";");
                    var last = e[e.length - 1];
                    if ($.trim(last).length > 0 && test(last)) {
                        return $.get('/exercise/get', { q: last }, function (data) {
                            return process(data);
                        });
                    }
                }
                return;
            }
        });

        expr.focus();
        $(".example").click(function () {
            var id = $(this).attr("id");
            window.expression.value =
                id === "example1" ? "barbell bench press 5x70 5x85 2x95-max 6x80 5x80" :
                    id === "example2" ? "barbell bench press 5x70 5x85 2x95-max 6x80 5x80;\nbarbell front squat  2x200-max;\ndumbbell fly 5x16 5x22 5x22 5x22 5x24-max 5x24-max 5x24-max 5x22 12x14 12x14" :
                        id === "example3" ? "barbell bench press \n2x100-note(easy) \n105-note(føltes forholdsvis tungt) \n107.5-note(spotter holdte fast i stangen, føltes meget tungere end 105)" :
                            id === "example4" ? "barbell front squat  2x200-max-note(to heavy to lift)" :
                                "";
            expr.trigger("keyup");
        });

    </script>
    @{
        var id = 397;
        var list = Model.Where(x => x.ExerciseID == id).GroupBy(x => x.Date.Date).OrderBy(x => x.Key);
        var denug = list.SelectMany(x => x).ToList();
        var dates = list.Select(x => x.Key).ToList();
        var _avg = list.Select(x => x.Average(a => a.Weight)).ToList();
        var _max = list.Select(x => x.Max(a => a.OneRepMax)).ToList();
        var _load = list.Select(x => x.Sum(a => a.Load)).ToList();
        var max = string.Join(",", _max.Zip(dates.Select(x => x.AddMonths(-1).ToString("yyyy, MM, dd")), (a, b) => string.Format("[Date.UTC({1}),{0}]", a, b)));
        var avg = string.Join(",", _avg.Zip(dates.Select(x => x.AddMonths(-1).ToString("yyyy, MM, dd")), (a, b) => string.Format("[Date.UTC({1}),{0}]", a, b)));
        var load = string.Join(",", _load.Zip(dates.Select(x => x.AddMonths(-1).ToString("yyyy, MM, dd")), (a, b) => string.Format("[Date.UTC({1}),{0}]", a, b)));

        var name = list.SelectMany(x => x).FirstOrDefault(x => x.ExerciseID == id).Exercise.Name;
    }
    @Html.Raw(string.Join("\n", denug))
    <script type="text/javascript">
        $(function () {
            var chart;
            $(document).ready(function () {
                chart = new Highcharts.Chart({
                    chart: {
                        renderTo: 'container',
                        zoomType: 'xy'
                    },
                    title: {
                        text: '@name'
                    },
                    subtitle: {
                        text: 'Source: WorldClimate.com'
                    }, xAxis: {
                        gridLineWidth: 0,
                        type: 'datetime',
                        dateTimeLabelFormats: { // don't display the dummy year
                            month: '%e. %b',
                            year: '%b'
                        }
                    },
                    yAxis: [{ // Primary yAxis
                        gridLineWidth: 1,
                        gridLineColor:'#ddd',
                        labels: {
                            formatter: function () {
                                return this.value + 'kg';
                            },
                            style: {
                                color: '#89A54E'
                            }
                        },
                        title: {
                            text: 'Load',
                            style: {
                                color: '#89A54E'
                            }
                        },
                        opposite: true

                    }, { // Secondary yAxis
                        gridLineWidth: 0,
                        title: {
                            text: 'Avg. Weight',
                            style: {
                                color: '#4572A7'
                            }
                        },
                        labels: {
                            formatter: function () {
                                return this.value + ' kg';
                            },
                            style: {
                                color: '#4572A7'
                            }
                        }

                    }, { // Tertiary yAxis
                        gridLineWidth: 0,
                        title: {
                            text: '1 Rep Max',
                            style: {
                                color: '#AA4643'
                            }
                        },
                        labels: {
                            formatter: function () {
                                return this.value + ' kg';
                            },
                            style: {
                                color: '#AA4643'
                            }
                        },
                        opposite: true
                    }],
                    tooltip: {
                        formatter: function () {
                            var unit = {
                                'Avg. Weight': 'kg',
                                'Load': 'kg',
                                '1 Rep Max': 'kg'
                            }[this.series.name];

                            return '' +
                                Highcharts.dateFormat('%e. %b', this.x) + ': ' + this.y + ' ' + unit;
                        }
                    },
                    legend: {
                        layout: 'vertical',
                        align: 'left',
                        x: 120,
                        verticalAlign: 'top',
                        y: 80,
                        floating: true,
                        backgroundColor: '#FFFFFF'
                    },
                    series: [{
                        name: 'Avg. Weight',
                        color: '#4572A7',
                        type: 'spline',
                        yAxis: 1,
                        data: [@Html.Raw(avg)]

                    }, {
                        name: '1 Rep Max',
                        type: 'spline',
                        color: '#AA4643',
                        yAxis: 2,
                        data: [@Html.Raw(max)],
                        marker: {
                            enabled: false
                        },
                        dashStyle: 'shortdot'

                    }, {
                        name: 'Load',
                        color: '#89A54E',
                        type: 'spline',
                        data: [@Html.Raw(load)]
                    }]
                });
            });

        });
    </script>
}

@using (Html.BeginForm("Create", "LoggedExercise"))
{
    <fieldset>
        <legend>Log</legend>
        <style>
            #expression {
                text-transform: lowercase;
            }

            table td:nth-child(3) {
                color: #aaa;
            }

            table td:nth-child(4) {
                color: #aaa;
            }

            .example {
                cursor: pointer;
            }
        </style>
        <div class="alert alert-block">
            <button type="button" class="close" data-dismiss="alert">×</button>
            <h4>Examples!</h4>
            <p>
                <span class="example" id="example1">barbell bench press 5x70 5x85 2x95-max 6x80 5x80</span>
            </p>
            <p>
                <span class="example" id="example2">barbell bench press 5x70 5x85 2x95-max 6x80 5x80; barbell front squat  2x200-max; dumbbell fly 5x16 5x22 5x22 5x22 5x24-max 5x24-max 5x24-max 5x22 12x14 12x14</span>
            </p>
            <p>
                <span class="example" id="example3">barbell bench press 2x100-note(easy) 105-note(føltes forholdsvis tungt) 107.5-note(spotter holdte fast i stangen, føltes meget tungere end 105)</span>
            </p>
            <p><span class="example" id="example4">barbell front squat  2x200-max-note(to heavy to lift)</span>  </p>
        </div>
        <div>
            <input
                name="Date"
                id="Date"
                type="datetime-local"
                value="@DateTime.Now.ToString("yyyy-MM-dd")"
                autocomplete="Off" />

        </div>
        <div>


            <textarea
                data-title="Tags"
                data-html="true"
                data-placement="bottom"
                name="expression"
                id="expression"
                autocomplete="Off" rows="6" class="span12"></textarea>
        </div>
        <table id="preview" class="table table-bordered table-hover table-condensed">
        </table>
        <div>
            <input type="submit" value="Log" class="btn btn-primary" />
        </div>
    </fieldset>
}
<div id="container"></div>
<table class="table table-bordered table-condensed table-hover">


    @foreach (var date in Model.GroupBy(x => x.Date).OrderByDescending(x => x.Key))
    {
        <tr>
            <th>@date.Key.ToShortDateString()</th>
            <td colspan="7">[<strong>@date.Sum(x => x.Reps)</strong> lifts] 
                [<strong>@date.Sum(x => x.Weight * x.Reps)kg</strong> total load]
            </td>
        </tr>
        foreach (var exercises in date.GroupBy(x => x.Exercise))
        {
        <tr>
            <th colspan="7">
                @exercises.Key.Name
            </th>
        </tr>
        <tr>
            <th>reps
            </th>
            <th>weight</th>
            <th>1 Rep Max</th>
            <th>load</th>
            <th>remarks</th>
            <th>notes</th>
            <th></th>
        </tr>
            foreach (var item in exercises)
            {
        <tr>
            <td align="right">
                @Html.DisplayFor(modelItem => item.Reps)
            </td>
            <td>
                <strong>@Html.DisplayFor(modelItem => item.Weight)</strong>kg
            </td>
            <td>

                <strong>@(item.OneRepMax)</strong>kg
            </td>
            <td>
                <strong>@(item.Weight * item.Reps)</strong>kg
            </td>
            <td>
                @if (item.FailedToLift)
                {
                    <span class="label label-important">Failed to lift</span>
                }
                @if (item.MaxEffort)
                {
                    
                    <span class="label label-success">Max effort</span>
                }
                @if (item.ToFailure)
                {
                    
                    <span class="label label-important">To Failure</span>
                }
            </td>
            <td>
                @if (!string.IsNullOrWhiteSpace(item.Comment))
                {
                    <button class="comment btn btn-mini" data-content="@item.Comment" data-title="Note:"><i class="icon-comment"></i></button>
                }
            </td>
            <td>
                @Html.ActionLink("Edit", "Edit", new { id = item.ID }, new { @class = "btn btn-mini" }) |
                                        @Html.ActionLink("Details", "Details", new { id = item.ID }) |
                                        @Html.ActionLink("Delete", "Delete", new { id = item.ID })
            </td>
        </tr>
            }
        <tr style="color: #aaa;">
            <td colspan="3">[<strong>@exercises.Sum(x => x.Reps)</strong> lifts] 
            </td>
            <td colspan="4">[<strong>@exercises.Sum(x => x.Weight * x.Reps)kg</strong> total load]
            </td>
        </tr>
        }
    }

</table>
