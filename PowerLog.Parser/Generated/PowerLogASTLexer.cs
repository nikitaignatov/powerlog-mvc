//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3 2012-10-20 05:19:32

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019




using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

namespace PowerLog.Parser
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class PowerLogASTLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int T__30=30;
	public const int T__31=31;
	public const int T__32=32;
	public const int T__33=33;
	public const int DATA=4;
	public const int DIGIT=5;
	public const int EXERCISE=6;
	public const int EXERCISE_NAME=7;
	public const int FLAGGED_SET=8;
	public const int FLAGS=9;
	public const int FLOAT=10;
	public const int FORCED=11;
	public const int FR=12;
	public const int FTL=13;
	public const int LETTER=14;
	public const int MAX=15;
	public const int MESSAGE=16;
	public const int MULTI_SET=17;
	public const int NOTE=18;
	public const int NUMBER=19;
	public const int REP=20;
	public const int RESULT=21;
	public const int SET=22;
	public const int SETS=23;
	public const int SINGLE=24;
	public const int TF=25;
	public const int WEIGHT=26;
	public const int WORD=27;
	public const int WS=28;
	public const int X=29;

    // delegates
    // delegators

	public PowerLogASTLexer()
	{
		OnCreated();
	}

	public PowerLogASTLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public PowerLogASTLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_DATA();
	partial void LeaveRule_DATA();

	// $ANTLR start "DATA"
	[GrammarRule("DATA")]
	private void mDATA()
	{
		EnterRule_DATA();
		EnterRule("DATA", 1);
		TraceIn("DATA", 1);
		try
		{
			int _type = DATA;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:12:6: ( 'data' )
			DebugEnterAlt(1);
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:12:8: 'data'
			{
			DebugLocation(12, 8);
			Match("data"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DATA", 1);
			LeaveRule("DATA", 1);
			LeaveRule_DATA();
		}
	}
	// $ANTLR end "DATA"

	partial void EnterRule_EXERCISE();
	partial void LeaveRule_EXERCISE();

	// $ANTLR start "EXERCISE"
	[GrammarRule("EXERCISE")]
	private void mEXERCISE()
	{
		EnterRule_EXERCISE();
		EnterRule("EXERCISE", 2);
		TraceIn("EXERCISE", 2);
		try
		{
			int _type = EXERCISE;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:13:10: ( 'exercise' )
			DebugEnterAlt(1);
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:13:12: 'exercise'
			{
			DebugLocation(13, 12);
			Match("exercise"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("EXERCISE", 2);
			LeaveRule("EXERCISE", 2);
			LeaveRule_EXERCISE();
		}
	}
	// $ANTLR end "EXERCISE"

	partial void EnterRule_EXERCISE_NAME();
	partial void LeaveRule_EXERCISE_NAME();

	// $ANTLR start "EXERCISE_NAME"
	[GrammarRule("EXERCISE_NAME")]
	private void mEXERCISE_NAME()
	{
		EnterRule_EXERCISE_NAME();
		EnterRule("EXERCISE_NAME", 3);
		TraceIn("EXERCISE_NAME", 3);
		try
		{
			int _type = EXERCISE_NAME;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:14:15: ( 'exercise_name' )
			DebugEnterAlt(1);
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:14:17: 'exercise_name'
			{
			DebugLocation(14, 17);
			Match("exercise_name"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("EXERCISE_NAME", 3);
			LeaveRule("EXERCISE_NAME", 3);
			LeaveRule_EXERCISE_NAME();
		}
	}
	// $ANTLR end "EXERCISE_NAME"

	partial void EnterRule_FLAGGED_SET();
	partial void LeaveRule_FLAGGED_SET();

	// $ANTLR start "FLAGGED_SET"
	[GrammarRule("FLAGGED_SET")]
	private void mFLAGGED_SET()
	{
		EnterRule_FLAGGED_SET();
		EnterRule("FLAGGED_SET", 4);
		TraceIn("FLAGGED_SET", 4);
		try
		{
			int _type = FLAGGED_SET;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:15:13: ( 'flagged_set' )
			DebugEnterAlt(1);
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:15:15: 'flagged_set'
			{
			DebugLocation(15, 15);
			Match("flagged_set"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FLAGGED_SET", 4);
			LeaveRule("FLAGGED_SET", 4);
			LeaveRule_FLAGGED_SET();
		}
	}
	// $ANTLR end "FLAGGED_SET"

	partial void EnterRule_FLAGS();
	partial void LeaveRule_FLAGS();

	// $ANTLR start "FLAGS"
	[GrammarRule("FLAGS")]
	private void mFLAGS()
	{
		EnterRule_FLAGS();
		EnterRule("FLAGS", 5);
		TraceIn("FLAGS", 5);
		try
		{
			int _type = FLAGS;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:16:7: ( 'flags' )
			DebugEnterAlt(1);
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:16:9: 'flags'
			{
			DebugLocation(16, 9);
			Match("flags"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FLAGS", 5);
			LeaveRule("FLAGS", 5);
			LeaveRule_FLAGS();
		}
	}
	// $ANTLR end "FLAGS"

	partial void EnterRule_FORCED();
	partial void LeaveRule_FORCED();

	// $ANTLR start "FORCED"
	[GrammarRule("FORCED")]
	private void mFORCED()
	{
		EnterRule_FORCED();
		EnterRule("FORCED", 6);
		TraceIn("FORCED", 6);
		try
		{
			int _type = FORCED;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:17:8: ( 'forced' )
			DebugEnterAlt(1);
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:17:10: 'forced'
			{
			DebugLocation(17, 10);
			Match("forced"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FORCED", 6);
			LeaveRule("FORCED", 6);
			LeaveRule_FORCED();
		}
	}
	// $ANTLR end "FORCED"

	partial void EnterRule_MESSAGE();
	partial void LeaveRule_MESSAGE();

	// $ANTLR start "MESSAGE"
	[GrammarRule("MESSAGE")]
	private void mMESSAGE()
	{
		EnterRule_MESSAGE();
		EnterRule("MESSAGE", 7);
		TraceIn("MESSAGE", 7);
		try
		{
			int _type = MESSAGE;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:18:9: ( 'message' )
			DebugEnterAlt(1);
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:18:11: 'message'
			{
			DebugLocation(18, 11);
			Match("message"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MESSAGE", 7);
			LeaveRule("MESSAGE", 7);
			LeaveRule_MESSAGE();
		}
	}
	// $ANTLR end "MESSAGE"

	partial void EnterRule_MULTI_SET();
	partial void LeaveRule_MULTI_SET();

	// $ANTLR start "MULTI_SET"
	[GrammarRule("MULTI_SET")]
	private void mMULTI_SET()
	{
		EnterRule_MULTI_SET();
		EnterRule("MULTI_SET", 8);
		TraceIn("MULTI_SET", 8);
		try
		{
			int _type = MULTI_SET;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:19:11: ( 'multi_set' )
			DebugEnterAlt(1);
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:19:13: 'multi_set'
			{
			DebugLocation(19, 13);
			Match("multi_set"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MULTI_SET", 8);
			LeaveRule("MULTI_SET", 8);
			LeaveRule_MULTI_SET();
		}
	}
	// $ANTLR end "MULTI_SET"

	partial void EnterRule_REP();
	partial void LeaveRule_REP();

	// $ANTLR start "REP"
	[GrammarRule("REP")]
	private void mREP()
	{
		EnterRule_REP();
		EnterRule("REP", 9);
		TraceIn("REP", 9);
		try
		{
			int _type = REP;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:20:5: ( 'rep' )
			DebugEnterAlt(1);
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:20:7: 'rep'
			{
			DebugLocation(20, 7);
			Match("rep"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("REP", 9);
			LeaveRule("REP", 9);
			LeaveRule_REP();
		}
	}
	// $ANTLR end "REP"

	partial void EnterRule_RESULT();
	partial void LeaveRule_RESULT();

	// $ANTLR start "RESULT"
	[GrammarRule("RESULT")]
	private void mRESULT()
	{
		EnterRule_RESULT();
		EnterRule("RESULT", 10);
		TraceIn("RESULT", 10);
		try
		{
			int _type = RESULT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:21:8: ( 'result' )
			DebugEnterAlt(1);
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:21:10: 'result'
			{
			DebugLocation(21, 10);
			Match("result"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RESULT", 10);
			LeaveRule("RESULT", 10);
			LeaveRule_RESULT();
		}
	}
	// $ANTLR end "RESULT"

	partial void EnterRule_SET();
	partial void LeaveRule_SET();

	// $ANTLR start "SET"
	[GrammarRule("SET")]
	private void mSET()
	{
		EnterRule_SET();
		EnterRule("SET", 11);
		TraceIn("SET", 11);
		try
		{
			int _type = SET;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:22:5: ( 'set' )
			DebugEnterAlt(1);
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:22:7: 'set'
			{
			DebugLocation(22, 7);
			Match("set"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SET", 11);
			LeaveRule("SET", 11);
			LeaveRule_SET();
		}
	}
	// $ANTLR end "SET"

	partial void EnterRule_SETS();
	partial void LeaveRule_SETS();

	// $ANTLR start "SETS"
	[GrammarRule("SETS")]
	private void mSETS()
	{
		EnterRule_SETS();
		EnterRule("SETS", 12);
		TraceIn("SETS", 12);
		try
		{
			int _type = SETS;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:23:6: ( 'sets' )
			DebugEnterAlt(1);
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:23:8: 'sets'
			{
			DebugLocation(23, 8);
			Match("sets"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SETS", 12);
			LeaveRule("SETS", 12);
			LeaveRule_SETS();
		}
	}
	// $ANTLR end "SETS"

	partial void EnterRule_SINGLE();
	partial void LeaveRule_SINGLE();

	// $ANTLR start "SINGLE"
	[GrammarRule("SINGLE")]
	private void mSINGLE()
	{
		EnterRule_SINGLE();
		EnterRule("SINGLE", 13);
		TraceIn("SINGLE", 13);
		try
		{
			int _type = SINGLE;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:24:8: ( 'single' )
			DebugEnterAlt(1);
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:24:10: 'single'
			{
			DebugLocation(24, 10);
			Match("single"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SINGLE", 13);
			LeaveRule("SINGLE", 13);
			LeaveRule_SINGLE();
		}
	}
	// $ANTLR end "SINGLE"

	partial void EnterRule_WEIGHT();
	partial void LeaveRule_WEIGHT();

	// $ANTLR start "WEIGHT"
	[GrammarRule("WEIGHT")]
	private void mWEIGHT()
	{
		EnterRule_WEIGHT();
		EnterRule("WEIGHT", 14);
		TraceIn("WEIGHT", 14);
		try
		{
			int _type = WEIGHT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:25:8: ( 'weight' )
			DebugEnterAlt(1);
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:25:10: 'weight'
			{
			DebugLocation(25, 10);
			Match("weight"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WEIGHT", 14);
			LeaveRule("WEIGHT", 14);
			LeaveRule_WEIGHT();
		}
	}
	// $ANTLR end "WEIGHT"

	partial void EnterRule_T__30();
	partial void LeaveRule_T__30();

	// $ANTLR start "T__30"
	[GrammarRule("T__30")]
	private void mT__30()
	{
		EnterRule_T__30();
		EnterRule("T__30", 15);
		TraceIn("T__30", 15);
		try
		{
			int _type = T__30;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:26:7: ( '(' )
			DebugEnterAlt(1);
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:26:9: '('
			{
			DebugLocation(26, 9);
			Match('('); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__30", 15);
			LeaveRule("T__30", 15);
			LeaveRule_T__30();
		}
	}
	// $ANTLR end "T__30"

	partial void EnterRule_T__31();
	partial void LeaveRule_T__31();

	// $ANTLR start "T__31"
	[GrammarRule("T__31")]
	private void mT__31()
	{
		EnterRule_T__31();
		EnterRule("T__31", 16);
		TraceIn("T__31", 16);
		try
		{
			int _type = T__31;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:27:7: ( ')' )
			DebugEnterAlt(1);
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:27:9: ')'
			{
			DebugLocation(27, 9);
			Match(')'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__31", 16);
			LeaveRule("T__31", 16);
			LeaveRule_T__31();
		}
	}
	// $ANTLR end "T__31"

	partial void EnterRule_T__32();
	partial void LeaveRule_T__32();

	// $ANTLR start "T__32"
	[GrammarRule("T__32")]
	private void mT__32()
	{
		EnterRule_T__32();
		EnterRule("T__32", 17);
		TraceIn("T__32", 17);
		try
		{
			int _type = T__32;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:28:7: ( '-' )
			DebugEnterAlt(1);
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:28:9: '-'
			{
			DebugLocation(28, 9);
			Match('-'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__32", 17);
			LeaveRule("T__32", 17);
			LeaveRule_T__32();
		}
	}
	// $ANTLR end "T__32"

	partial void EnterRule_T__33();
	partial void LeaveRule_T__33();

	// $ANTLR start "T__33"
	[GrammarRule("T__33")]
	private void mT__33()
	{
		EnterRule_T__33();
		EnterRule("T__33", 18);
		TraceIn("T__33", 18);
		try
		{
			int _type = T__33;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:29:7: ( ';' )
			DebugEnterAlt(1);
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:29:9: ';'
			{
			DebugLocation(29, 9);
			Match(';'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__33", 18);
			LeaveRule("T__33", 18);
			LeaveRule_T__33();
		}
	}
	// $ANTLR end "T__33"

	partial void EnterRule_NUMBER();
	partial void LeaveRule_NUMBER();

	// $ANTLR start "NUMBER"
	[GrammarRule("NUMBER")]
	private void mNUMBER()
	{
		EnterRule_NUMBER();
		EnterRule("NUMBER", 19);
		TraceIn("NUMBER", 19);
		try
		{
			int _type = NUMBER;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:86:7: ( ( '0' .. '9' )+ )
			DebugEnterAlt(1);
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:86:9: ( '0' .. '9' )+
			{
			DebugLocation(86, 9);
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:86:9: ( '0' .. '9' )+
			int cnt1=0;
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if (((LA1_0>='0' && LA1_0<='9')))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch (alt1)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:
					{
					DebugLocation(86, 9);
					input.Consume();


					}
					break;

				default:
					if (cnt1 >= 1)
						goto loop1;

					EarlyExitException eee1 = new EarlyExitException( 1, input );
					DebugRecognitionException(eee1);
					throw eee1;
				}
				cnt1++;
			}
			loop1:
				;

			} finally { DebugExitSubRule(1); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NUMBER", 19);
			LeaveRule("NUMBER", 19);
			LeaveRule_NUMBER();
		}
	}
	// $ANTLR end "NUMBER"

	partial void EnterRule_FLOAT();
	partial void LeaveRule_FLOAT();

	// $ANTLR start "FLOAT"
	[GrammarRule("FLOAT")]
	private void mFLOAT()
	{
		EnterRule_FLOAT();
		EnterRule("FLOAT", 20);
		TraceIn("FLOAT", 20);
		try
		{
			int _type = FLOAT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:88:7: ( ( '0' .. '9' )+ '.' ( '0' .. '9' )* | '.' ( '0' .. '9' )+ )
			int alt5=2;
			try { DebugEnterDecision(5, false);
			int LA5_0 = input.LA(1);

			if (((LA5_0>='0' && LA5_0<='9')))
			{
				alt5 = 1;
			}
			else if ((LA5_0=='.'))
			{
				alt5 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:88:11: ( '0' .. '9' )+ '.' ( '0' .. '9' )*
				{
				DebugLocation(88, 11);
				// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:88:11: ( '0' .. '9' )+
				int cnt2=0;
				try { DebugEnterSubRule(2);
				while (true)
				{
					int alt2=2;
					try { DebugEnterDecision(2, false);
					int LA2_0 = input.LA(1);

					if (((LA2_0>='0' && LA2_0<='9')))
					{
						alt2 = 1;
					}


					} finally { DebugExitDecision(2); }
					switch (alt2)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:
						{
						DebugLocation(88, 11);
						input.Consume();


						}
						break;

					default:
						if (cnt2 >= 1)
							goto loop2;

						EarlyExitException eee2 = new EarlyExitException( 2, input );
						DebugRecognitionException(eee2);
						throw eee2;
					}
					cnt2++;
				}
				loop2:
					;

				} finally { DebugExitSubRule(2); }

				DebugLocation(88, 23);
				Match('.'); 
				DebugLocation(88, 27);
				// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:88:27: ( '0' .. '9' )*
				try { DebugEnterSubRule(3);
				while (true)
				{
					int alt3=2;
					try { DebugEnterDecision(3, false);
					int LA3_0 = input.LA(1);

					if (((LA3_0>='0' && LA3_0<='9')))
					{
						alt3 = 1;
					}


					} finally { DebugExitDecision(3); }
					switch ( alt3 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:
						{
						DebugLocation(88, 27);
						input.Consume();


						}
						break;

					default:
						goto loop3;
					}
				}

				loop3:
					;

				} finally { DebugExitSubRule(3); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:89:11: '.' ( '0' .. '9' )+
				{
				DebugLocation(89, 11);
				Match('.'); 
				DebugLocation(89, 15);
				// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:89:15: ( '0' .. '9' )+
				int cnt4=0;
				try { DebugEnterSubRule(4);
				while (true)
				{
					int alt4=2;
					try { DebugEnterDecision(4, false);
					int LA4_0 = input.LA(1);

					if (((LA4_0>='0' && LA4_0<='9')))
					{
						alt4 = 1;
					}


					} finally { DebugExitDecision(4); }
					switch (alt4)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:
						{
						DebugLocation(89, 15);
						input.Consume();


						}
						break;

					default:
						if (cnt4 >= 1)
							goto loop4;

						EarlyExitException eee4 = new EarlyExitException( 4, input );
						DebugRecognitionException(eee4);
						throw eee4;
					}
					cnt4++;
				}
				loop4:
					;

				} finally { DebugExitSubRule(4); }


				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FLOAT", 20);
			LeaveRule("FLOAT", 20);
			LeaveRule_FLOAT();
		}
	}
	// $ANTLR end "FLOAT"

	partial void EnterRule_X();
	partial void LeaveRule_X();

	// $ANTLR start "X"
	[GrammarRule("X")]
	private void mX()
	{
		EnterRule_X();
		EnterRule("X", 21);
		TraceIn("X", 21);
		try
		{
			int _type = X;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:92:7: ( 'x' )
			DebugEnterAlt(1);
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:92:10: 'x'
			{
			DebugLocation(92, 10);
			Match('x'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("X", 21);
			LeaveRule("X", 21);
			LeaveRule_X();
		}
	}
	// $ANTLR end "X"

	partial void EnterRule_MAX();
	partial void LeaveRule_MAX();

	// $ANTLR start "MAX"
	[GrammarRule("MAX")]
	private void mMAX()
	{
		EnterRule_MAX();
		EnterRule("MAX", 22);
		TraceIn("MAX", 22);
		try
		{
			int _type = MAX;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:94:7: ( 'max' )
			DebugEnterAlt(1);
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:94:9: 'max'
			{
			DebugLocation(94, 9);
			Match("max"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MAX", 22);
			LeaveRule("MAX", 22);
			LeaveRule_MAX();
		}
	}
	// $ANTLR end "MAX"

	partial void EnterRule_FTL();
	partial void LeaveRule_FTL();

	// $ANTLR start "FTL"
	[GrammarRule("FTL")]
	private void mFTL()
	{
		EnterRule_FTL();
		EnterRule("FTL", 23);
		TraceIn("FTL", 23);
		try
		{
			int _type = FTL;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:95:7: ( 'ftl' )
			DebugEnterAlt(1);
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:95:9: 'ftl'
			{
			DebugLocation(95, 9);
			Match("ftl"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FTL", 23);
			LeaveRule("FTL", 23);
			LeaveRule_FTL();
		}
	}
	// $ANTLR end "FTL"

	partial void EnterRule_FR();
	partial void LeaveRule_FR();

	// $ANTLR start "FR"
	[GrammarRule("FR")]
	private void mFR()
	{
		EnterRule_FR();
		EnterRule("FR", 24);
		TraceIn("FR", 24);
		try
		{
			int _type = FR;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:96:7: ( 'fr' )
			DebugEnterAlt(1);
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:96:9: 'fr'
			{
			DebugLocation(96, 9);
			Match("fr"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FR", 24);
			LeaveRule("FR", 24);
			LeaveRule_FR();
		}
	}
	// $ANTLR end "FR"

	partial void EnterRule_TF();
	partial void LeaveRule_TF();

	// $ANTLR start "TF"
	[GrammarRule("TF")]
	private void mTF()
	{
		EnterRule_TF();
		EnterRule("TF", 25);
		TraceIn("TF", 25);
		try
		{
			int _type = TF;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:97:7: ( 'tf' )
			DebugEnterAlt(1);
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:97:9: 'tf'
			{
			DebugLocation(97, 9);
			Match("tf"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TF", 25);
			LeaveRule("TF", 25);
			LeaveRule_TF();
		}
	}
	// $ANTLR end "TF"

	partial void EnterRule_NOTE();
	partial void LeaveRule_NOTE();

	// $ANTLR start "NOTE"
	[GrammarRule("NOTE")]
	private void mNOTE()
	{
		EnterRule_NOTE();
		EnterRule("NOTE", 26);
		TraceIn("NOTE", 26);
		try
		{
			int _type = NOTE;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:98:7: ( 'note' )
			DebugEnterAlt(1);
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:98:9: 'note'
			{
			DebugLocation(98, 9);
			Match("note"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NOTE", 26);
			LeaveRule("NOTE", 26);
			LeaveRule_NOTE();
		}
	}
	// $ANTLR end "NOTE"

	partial void EnterRule_DIGIT();
	partial void LeaveRule_DIGIT();

	// $ANTLR start "DIGIT"
	[GrammarRule("DIGIT")]
	private void mDIGIT()
	{
		EnterRule_DIGIT();
		EnterRule("DIGIT", 27);
		TraceIn("DIGIT", 27);
		try
		{
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:103:5: ( '\\u0030' .. '\\u0039' | '\\u0660' .. '\\u0669' | '\\u06f0' .. '\\u06f9' | '\\u0966' .. '\\u096f' | '\\u09e6' .. '\\u09ef' | '\\u0a66' .. '\\u0a6f' | '\\u0ae6' .. '\\u0aef' | '\\u0b66' .. '\\u0b6f' | '\\u0be7' .. '\\u0bef' | '\\u0c66' .. '\\u0c6f' | '\\u0ce6' .. '\\u0cef' | '\\u0d66' .. '\\u0d6f' | '\\u0e50' .. '\\u0e59' | '\\u0ed0' .. '\\u0ed9' | '\\u1040' .. '\\u1049' )
			DebugEnterAlt(1);
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:
			{
			DebugLocation(103, 5);
			if ((input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='\u0660' && input.LA(1)<='\u0669')||(input.LA(1)>='\u06F0' && input.LA(1)<='\u06F9')||(input.LA(1)>='\u0966' && input.LA(1)<='\u096F')||(input.LA(1)>='\u09E6' && input.LA(1)<='\u09EF')||(input.LA(1)>='\u0A66' && input.LA(1)<='\u0A6F')||(input.LA(1)>='\u0AE6' && input.LA(1)<='\u0AEF')||(input.LA(1)>='\u0B66' && input.LA(1)<='\u0B6F')||(input.LA(1)>='\u0BE7' && input.LA(1)<='\u0BEF')||(input.LA(1)>='\u0C66' && input.LA(1)<='\u0C6F')||(input.LA(1)>='\u0CE6' && input.LA(1)<='\u0CEF')||(input.LA(1)>='\u0D66' && input.LA(1)<='\u0D6F')||(input.LA(1)>='\u0E50' && input.LA(1)<='\u0E59')||(input.LA(1)>='\u0ED0' && input.LA(1)<='\u0ED9')||(input.LA(1)>='\u1040' && input.LA(1)<='\u1049'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("DIGIT", 27);
			LeaveRule("DIGIT", 27);
			LeaveRule_DIGIT();
		}
	}
	// $ANTLR end "DIGIT"

	partial void EnterRule_LETTER();
	partial void LeaveRule_LETTER();

	// $ANTLR start "LETTER"
	[GrammarRule("LETTER")]
	private void mLETTER()
	{
		EnterRule_LETTER();
		EnterRule("LETTER", 28);
		TraceIn("LETTER", 28);
		try
		{
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:122:5: ( '\\u0024' | '\\u0041' .. '\\u005a' | '\\u005f' | '\\u0061' .. '\\u007a' | '\\u00c0' .. '\\u00d6' | '\\u00d8' .. '\\u00f6' | '\\u00f8' .. '\\u00ff' | '\\u0100' .. '\\u1fff' | '\\u3040' .. '\\u318f' | '\\u3300' .. '\\u337f' | '\\u3400' .. '\\u3d2d' | '\\u4e00' .. '\\u9fff' | '\\uf900' .. '\\ufaff' )
			DebugEnterAlt(1);
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:
			{
			DebugLocation(122, 5);
			if (input.LA(1)=='$'||(input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z')||(input.LA(1)>='\u00C0' && input.LA(1)<='\u00D6')||(input.LA(1)>='\u00D8' && input.LA(1)<='\u00F6')||(input.LA(1)>='\u00F8' && input.LA(1)<='\u1FFF')||(input.LA(1)>='\u3040' && input.LA(1)<='\u318F')||(input.LA(1)>='\u3300' && input.LA(1)<='\u337F')||(input.LA(1)>='\u3400' && input.LA(1)<='\u3D2D')||(input.LA(1)>='\u4E00' && input.LA(1)<='\u9FFF')||(input.LA(1)>='\uF900' && input.LA(1)<='\uFAFF'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("LETTER", 28);
			LeaveRule("LETTER", 28);
			LeaveRule_LETTER();
		}
	}
	// $ANTLR end "LETTER"

	partial void EnterRule_WORD();
	partial void LeaveRule_WORD();

	// $ANTLR start "WORD"
	[GrammarRule("WORD")]
	private void mWORD()
	{
		EnterRule_WORD();
		EnterRule("WORD", 29);
		TraceIn("WORD", 29);
		try
		{
			int _type = WORD;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:136:7: ( LETTER ( LETTER )* )
			DebugEnterAlt(1);
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:136:9: LETTER ( LETTER )*
			{
			DebugLocation(136, 9);
			mLETTER(); 
			DebugLocation(136, 15);
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:136:15: ( LETTER )*
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, false);
				int LA6_0 = input.LA(1);

				if ((LA6_0=='$'||(LA6_0>='A' && LA6_0<='Z')||LA6_0=='_'||(LA6_0>='a' && LA6_0<='z')||(LA6_0>='\u00C0' && LA6_0<='\u00D6')||(LA6_0>='\u00D8' && LA6_0<='\u00F6')||(LA6_0>='\u00F8' && LA6_0<='\u1FFF')||(LA6_0>='\u3040' && LA6_0<='\u318F')||(LA6_0>='\u3300' && LA6_0<='\u337F')||(LA6_0>='\u3400' && LA6_0<='\u3D2D')||(LA6_0>='\u4E00' && LA6_0<='\u9FFF')||(LA6_0>='\uF900' && LA6_0<='\uFAFF')))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch ( alt6 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:
					{
					DebugLocation(136, 15);
					input.Consume();


					}
					break;

				default:
					goto loop6;
				}
			}

			loop6:
				;

			} finally { DebugExitSubRule(6); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WORD", 29);
			LeaveRule("WORD", 29);
			LeaveRule_WORD();
		}
	}
	// $ANTLR end "WORD"

	partial void EnterRule_WS();
	partial void LeaveRule_WS();

	// $ANTLR start "WS"
	[GrammarRule("WS")]
	private void mWS()
	{
		EnterRule_WS();
		EnterRule("WS", 30);
		TraceIn("WS", 30);
		try
		{
			int _type = WS;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:139:7: ( ( ' ' | '\\t' | '\\n' | '\\r' | '\\f' )+ )
			DebugEnterAlt(1);
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:139:9: ( ' ' | '\\t' | '\\n' | '\\r' | '\\f' )+
			{
			DebugLocation(139, 9);
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:139:9: ( ' ' | '\\t' | '\\n' | '\\r' | '\\f' )+
			int cnt7=0;
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if (((LA7_0>='\t' && LA7_0<='\n')||(LA7_0>='\f' && LA7_0<='\r')||LA7_0==' '))
				{
					alt7 = 1;
				}


				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:
					{
					DebugLocation(139, 9);
					input.Consume();


					}
					break;

				default:
					if (cnt7 >= 1)
						goto loop7;

					EarlyExitException eee7 = new EarlyExitException( 7, input );
					DebugRecognitionException(eee7);
					throw eee7;
				}
				cnt7++;
			}
			loop7:
				;

			} finally { DebugExitSubRule(7); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WS", 30);
			LeaveRule("WS", 30);
			LeaveRule_WS();
		}
	}
	// $ANTLR end "WS"

	public override void mTokens()
	{
		// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:1:8: ( DATA | EXERCISE | EXERCISE_NAME | FLAGGED_SET | FLAGS | FORCED | MESSAGE | MULTI_SET | REP | RESULT | SET | SETS | SINGLE | WEIGHT | T__30 | T__31 | T__32 | T__33 | NUMBER | FLOAT | X | MAX | FTL | FR | TF | NOTE | WORD | WS )
		int alt8=28;
		try { DebugEnterDecision(8, false);
		try
		{
			alt8 = dfa8.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(8); }
		switch (alt8)
		{
		case 1:
			DebugEnterAlt(1);
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:1:10: DATA
			{
			DebugLocation(1, 10);
			mDATA(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:1:15: EXERCISE
			{
			DebugLocation(1, 15);
			mEXERCISE(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:1:24: EXERCISE_NAME
			{
			DebugLocation(1, 24);
			mEXERCISE_NAME(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:1:38: FLAGGED_SET
			{
			DebugLocation(1, 38);
			mFLAGGED_SET(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:1:50: FLAGS
			{
			DebugLocation(1, 50);
			mFLAGS(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:1:56: FORCED
			{
			DebugLocation(1, 56);
			mFORCED(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:1:63: MESSAGE
			{
			DebugLocation(1, 63);
			mMESSAGE(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:1:71: MULTI_SET
			{
			DebugLocation(1, 71);
			mMULTI_SET(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:1:81: REP
			{
			DebugLocation(1, 81);
			mREP(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:1:85: RESULT
			{
			DebugLocation(1, 85);
			mRESULT(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:1:92: SET
			{
			DebugLocation(1, 92);
			mSET(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:1:96: SETS
			{
			DebugLocation(1, 96);
			mSETS(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:1:101: SINGLE
			{
			DebugLocation(1, 101);
			mSINGLE(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:1:108: WEIGHT
			{
			DebugLocation(1, 108);
			mWEIGHT(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:1:115: T__30
			{
			DebugLocation(1, 115);
			mT__30(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:1:121: T__31
			{
			DebugLocation(1, 121);
			mT__31(); 

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:1:127: T__32
			{
			DebugLocation(1, 127);
			mT__32(); 

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:1:133: T__33
			{
			DebugLocation(1, 133);
			mT__33(); 

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:1:139: NUMBER
			{
			DebugLocation(1, 139);
			mNUMBER(); 

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:1:146: FLOAT
			{
			DebugLocation(1, 146);
			mFLOAT(); 

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:1:152: X
			{
			DebugLocation(1, 152);
			mX(); 

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:1:154: MAX
			{
			DebugLocation(1, 154);
			mMAX(); 

			}
			break;
		case 23:
			DebugEnterAlt(23);
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:1:158: FTL
			{
			DebugLocation(1, 158);
			mFTL(); 

			}
			break;
		case 24:
			DebugEnterAlt(24);
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:1:162: FR
			{
			DebugLocation(1, 162);
			mFR(); 

			}
			break;
		case 25:
			DebugEnterAlt(25);
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:1:165: TF
			{
			DebugLocation(1, 165);
			mTF(); 

			}
			break;
		case 26:
			DebugEnterAlt(26);
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:1:168: NOTE
			{
			DebugLocation(1, 168);
			mNOTE(); 

			}
			break;
		case 27:
			DebugEnterAlt(27);
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:1:173: WORD
			{
			DebugLocation(1, 173);
			mWORD(); 

			}
			break;
		case 28:
			DebugEnterAlt(28);
			// C:\\Users\\Bacon\\Documents\\Visual Studio 2012\\Projects\\REPO\\PowerLog\\PowerLog.Parser\\Generated\\PowerLogAST.g3:1:178: WS
			{
			DebugLocation(1, 178);
			mWS(); 

			}
			break;

		}

	}


	#region DFA
	DFA8 dfa8;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa8 = new DFA8(this);
	}

	private class DFA8 : DFA
	{
		private const string DFA8_eotS =
			"\x1\xFFFF\x7\x11\x4\xFFFF\x1\x20\x1\xFFFF\x1\x21\x2\x11\x2\xFFFF\x5\x11"+
			"\x1\x29\x7\x11\x2\xFFFF\x1\x32\x5\x11\x1\x38\x1\xFFFF\x2\x11\x1\x3B\x1"+
			"\x3C\x1\x11\x1\x3F\x2\x11\x1\xFFFF\x1\x11\x1\x43\x3\x11\x1\xFFFF\x2\x11"+
			"\x2\xFFFF\x1\x11\x1\x4B\x1\xFFFF\x2\x11\x1\x4E\x1\xFFFF\x2\x11\x1\x51"+
			"\x4\x11\x1\xFFFF\x2\x11\x1\xFFFF\x2\x11\x1\xFFFF\x1\x5A\x2\x11\x1\x5D"+
			"\x1\x5E\x1\x5F\x2\x11\x1\xFFFF\x1\x62\x1\x11\x3\xFFFF\x1\x65\x1\x11\x1"+
			"\xFFFF\x2\x11\x1\xFFFF\x1\x11\x1\x6A\x2\x11\x1\xFFFF\x1\x11\x1\x6E\x1"+
			"\x11\x1\xFFFF\x1\x70\x1\xFFFF";
		private const string DFA8_eofS =
			"\x71\xFFFF";
		private const string DFA8_minS =
			"\x1\x9\x1\x61\x1\x78\x1\x6C\x1\x61\x3\x65\x4\xFFFF\x1\x2E\x1\xFFFF\x1"+
			"\x24\x1\x66\x1\x6F\x2\xFFFF\x1\x74\x1\x65\x1\x61\x1\x72\x1\x6C\x1\x24"+
			"\x1\x73\x1\x6C\x1\x78\x1\x70\x1\x74\x1\x6E\x1\x69\x2\xFFFF\x1\x24\x1"+
			"\x74\x1\x61\x1\x72\x1\x67\x1\x63\x1\x24\x1\xFFFF\x1\x73\x1\x74\x2\x24"+
			"\x1\x75\x1\x24\x2\x67\x1\xFFFF\x1\x65\x1\x24\x1\x63\x1\x67\x1\x65\x1"+
			"\xFFFF\x1\x61\x1\x69\x2\xFFFF\x1\x6C\x1\x24\x1\xFFFF\x1\x6C\x1\x68\x1"+
			"\x24\x1\xFFFF\x1\x69\x1\x65\x1\x24\x1\x64\x1\x67\x1\x5F\x1\x74\x1\xFFFF"+
			"\x1\x65\x1\x74\x1\xFFFF\x1\x73\x1\x64\x1\xFFFF\x1\x24\x1\x65\x1\x73\x3"+
			"\x24\x1\x65\x1\x5F\x1\xFFFF\x1\x24\x1\x65\x3\xFFFF\x1\x24\x1\x73\x1\xFFFF"+
			"\x1\x74\x1\x6E\x1\xFFFF\x1\x65\x1\x24\x1\x61\x1\x74\x1\xFFFF\x1\x6D\x1"+
			"\x24\x1\x65\x1\xFFFF\x1\x24\x1\xFFFF";
		private const string DFA8_maxS =
			"\x1\xFAFF\x1\x61\x1\x78\x1\x74\x1\x75\x1\x65\x1\x69\x1\x65\x4\xFFFF\x1"+
			"\x39\x1\xFFFF\x1\xFAFF\x1\x66\x1\x6F\x2\xFFFF\x1\x74\x1\x65\x1\x61\x1"+
			"\x72\x1\x6C\x1\xFAFF\x1\x73\x1\x6C\x1\x78\x1\x73\x1\x74\x1\x6E\x1\x69"+
			"\x2\xFFFF\x1\xFAFF\x1\x74\x1\x61\x1\x72\x1\x67\x1\x63\x1\xFAFF\x1\xFFFF"+
			"\x1\x73\x1\x74\x2\xFAFF\x1\x75\x1\xFAFF\x2\x67\x1\xFFFF\x1\x65\x1\xFAFF"+
			"\x1\x63\x1\x73\x1\x65\x1\xFFFF\x1\x61\x1\x69\x2\xFFFF\x1\x6C\x1\xFAFF"+
			"\x1\xFFFF\x1\x6C\x1\x68\x1\xFAFF\x1\xFFFF\x1\x69\x1\x65\x1\xFAFF\x1\x64"+
			"\x1\x67\x1\x5F\x1\x74\x1\xFFFF\x1\x65\x1\x74\x1\xFFFF\x1\x73\x1\x64\x1"+
			"\xFFFF\x1\xFAFF\x1\x65\x1\x73\x3\xFAFF\x1\x65\x1\x5F\x1\xFFFF\x1\xFAFF"+
			"\x1\x65\x3\xFFFF\x1\xFAFF\x1\x73\x1\xFFFF\x1\x74\x1\x6E\x1\xFFFF\x1\x65"+
			"\x1\xFAFF\x1\x61\x1\x74\x1\xFFFF\x1\x6D\x1\xFAFF\x1\x65\x1\xFFFF\x1\xFAFF"+
			"\x1\xFFFF";
		private const string DFA8_acceptS =
			"\x8\xFFFF\x1\xF\x1\x10\x1\x11\x1\x12\x1\xFFFF\x1\x14\x3\xFFFF\x1\x1B"+
			"\x1\x1C\xD\xFFFF\x1\x13\x1\x15\x7\xFFFF\x1\x18\x8\xFFFF\x1\x19\x5\xFFFF"+
			"\x1\x17\x2\xFFFF\x1\x16\x1\x9\x2\xFFFF\x1\xB\x3\xFFFF\x1\x1\x7\xFFFF"+
			"\x1\xC\x2\xFFFF\x1\x1A\x2\xFFFF\x1\x5\x8\xFFFF\x1\x6\x2\xFFFF\x1\xA\x1"+
			"\xD\x1\xE\x2\xFFFF\x1\x7\x2\xFFFF\x1\x2\x4\xFFFF\x1\x8\x3\xFFFF\x1\x4"+
			"\x1\xFFFF\x1\x3";
		private const string DFA8_specialS =
			"\x71\xFFFF}>";
		private static readonly string[] DFA8_transitionS =
			{
				"\x2\x12\x1\xFFFF\x2\x12\x12\xFFFF\x1\x12\x3\xFFFF\x1\x11\x3\xFFFF\x1"+
				"\x8\x1\x9\x3\xFFFF\x1\xA\x1\xD\x1\xFFFF\xA\xC\x1\xFFFF\x1\xB\x5\xFFFF"+
				"\x1A\x11\x4\xFFFF\x1\x11\x1\xFFFF\x3\x11\x1\x1\x1\x2\x1\x3\x6\x11\x1"+
				"\x4\x1\x10\x3\x11\x1\x5\x1\x6\x1\xF\x2\x11\x1\x7\x1\xE\x2\x11\x45\xFFFF"+
				"\x17\x11\x1\xFFFF\x1F\x11\x1\xFFFF\x1F08\x11\x1040\xFFFF\x150\x11\x170"+
				"\xFFFF\x80\x11\x80\xFFFF\x92E\x11\x10D2\xFFFF\x5200\x11\x5900\xFFFF"+
				"\x200\x11",
				"\x1\x13",
				"\x1\x14",
				"\x1\x15\x2\xFFFF\x1\x16\x2\xFFFF\x1\x18\x1\xFFFF\x1\x17",
				"\x1\x1B\x3\xFFFF\x1\x19\xF\xFFFF\x1\x1A",
				"\x1\x1C",
				"\x1\x1D\x3\xFFFF\x1\x1E",
				"\x1\x1F",
				"",
				"",
				"",
				"",
				"\x1\xD\x1\xFFFF\xA\xC",
				"",
				"\x1\x11\x1C\xFFFF\x1A\x11\x4\xFFFF\x1\x11\x1\xFFFF\x1A\x11\x45\xFFFF"+
				"\x17\x11\x1\xFFFF\x1F\x11\x1\xFFFF\x1F08\x11\x1040\xFFFF\x150\x11\x170"+
				"\xFFFF\x80\x11\x80\xFFFF\x92E\x11\x10D2\xFFFF\x5200\x11\x5900\xFFFF"+
				"\x200\x11",
				"\x1\x22",
				"\x1\x23",
				"",
				"",
				"\x1\x24",
				"\x1\x25",
				"\x1\x26",
				"\x1\x27",
				"\x1\x28",
				"\x1\x11\x1C\xFFFF\x1A\x11\x4\xFFFF\x1\x11\x1\xFFFF\x1A\x11\x45\xFFFF"+
				"\x17\x11\x1\xFFFF\x1F\x11\x1\xFFFF\x1F08\x11\x1040\xFFFF\x150\x11\x170"+
				"\xFFFF\x80\x11\x80\xFFFF\x92E\x11\x10D2\xFFFF\x5200\x11\x5900\xFFFF"+
				"\x200\x11",
				"\x1\x2A",
				"\x1\x2B",
				"\x1\x2C",
				"\x1\x2D\x2\xFFFF\x1\x2E",
				"\x1\x2F",
				"\x1\x30",
				"\x1\x31",
				"",
				"",
				"\x1\x11\x1C\xFFFF\x1A\x11\x4\xFFFF\x1\x11\x1\xFFFF\x1A\x11\x45\xFFFF"+
				"\x17\x11\x1\xFFFF\x1F\x11\x1\xFFFF\x1F08\x11\x1040\xFFFF\x150\x11\x170"+
				"\xFFFF\x80\x11\x80\xFFFF\x92E\x11\x10D2\xFFFF\x5200\x11\x5900\xFFFF"+
				"\x200\x11",
				"\x1\x33",
				"\x1\x34",
				"\x1\x35",
				"\x1\x36",
				"\x1\x37",
				"\x1\x11\x1C\xFFFF\x1A\x11\x4\xFFFF\x1\x11\x1\xFFFF\x1A\x11\x45\xFFFF"+
				"\x17\x11\x1\xFFFF\x1F\x11\x1\xFFFF\x1F08\x11\x1040\xFFFF\x150\x11\x170"+
				"\xFFFF\x80\x11\x80\xFFFF\x92E\x11\x10D2\xFFFF\x5200\x11\x5900\xFFFF"+
				"\x200\x11",
				"",
				"\x1\x39",
				"\x1\x3A",
				"\x1\x11\x1C\xFFFF\x1A\x11\x4\xFFFF\x1\x11\x1\xFFFF\x1A\x11\x45\xFFFF"+
				"\x17\x11\x1\xFFFF\x1F\x11\x1\xFFFF\x1F08\x11\x1040\xFFFF\x150\x11\x170"+
				"\xFFFF\x80\x11\x80\xFFFF\x92E\x11\x10D2\xFFFF\x5200\x11\x5900\xFFFF"+
				"\x200\x11",
				"\x1\x11\x1C\xFFFF\x1A\x11\x4\xFFFF\x1\x11\x1\xFFFF\x1A\x11\x45\xFFFF"+
				"\x17\x11\x1\xFFFF\x1F\x11\x1\xFFFF\x1F08\x11\x1040\xFFFF\x150\x11\x170"+
				"\xFFFF\x80\x11\x80\xFFFF\x92E\x11\x10D2\xFFFF\x5200\x11\x5900\xFFFF"+
				"\x200\x11",
				"\x1\x3D",
				"\x1\x11\x1C\xFFFF\x1A\x11\x4\xFFFF\x1\x11\x1\xFFFF\x12\x11\x1\x3E\x7"+
				"\x11\x45\xFFFF\x17\x11\x1\xFFFF\x1F\x11\x1\xFFFF\x1F08\x11\x1040\xFFFF"+
				"\x150\x11\x170\xFFFF\x80\x11\x80\xFFFF\x92E\x11\x10D2\xFFFF\x5200\x11"+
				"\x5900\xFFFF\x200\x11",
				"\x1\x40",
				"\x1\x41",
				"",
				"\x1\x42",
				"\x1\x11\x1C\xFFFF\x1A\x11\x4\xFFFF\x1\x11\x1\xFFFF\x1A\x11\x45\xFFFF"+
				"\x17\x11\x1\xFFFF\x1F\x11\x1\xFFFF\x1F08\x11\x1040\xFFFF\x150\x11\x170"+
				"\xFFFF\x80\x11\x80\xFFFF\x92E\x11\x10D2\xFFFF\x5200\x11\x5900\xFFFF"+
				"\x200\x11",
				"\x1\x44",
				"\x1\x45\xB\xFFFF\x1\x46",
				"\x1\x47",
				"",
				"\x1\x48",
				"\x1\x49",
				"",
				"",
				"\x1\x4A",
				"\x1\x11\x1C\xFFFF\x1A\x11\x4\xFFFF\x1\x11\x1\xFFFF\x1A\x11\x45\xFFFF"+
				"\x17\x11\x1\xFFFF\x1F\x11\x1\xFFFF\x1F08\x11\x1040\xFFFF\x150\x11\x170"+
				"\xFFFF\x80\x11\x80\xFFFF\x92E\x11\x10D2\xFFFF\x5200\x11\x5900\xFFFF"+
				"\x200\x11",
				"",
				"\x1\x4C",
				"\x1\x4D",
				"\x1\x11\x1C\xFFFF\x1A\x11\x4\xFFFF\x1\x11\x1\xFFFF\x1A\x11\x45\xFFFF"+
				"\x17\x11\x1\xFFFF\x1F\x11\x1\xFFFF\x1F08\x11\x1040\xFFFF\x150\x11\x170"+
				"\xFFFF\x80\x11\x80\xFFFF\x92E\x11\x10D2\xFFFF\x5200\x11\x5900\xFFFF"+
				"\x200\x11",
				"",
				"\x1\x4F",
				"\x1\x50",
				"\x1\x11\x1C\xFFFF\x1A\x11\x4\xFFFF\x1\x11\x1\xFFFF\x1A\x11\x45\xFFFF"+
				"\x17\x11\x1\xFFFF\x1F\x11\x1\xFFFF\x1F08\x11\x1040\xFFFF\x150\x11\x170"+
				"\xFFFF\x80\x11\x80\xFFFF\x92E\x11\x10D2\xFFFF\x5200\x11\x5900\xFFFF"+
				"\x200\x11",
				"\x1\x52",
				"\x1\x53",
				"\x1\x54",
				"\x1\x55",
				"",
				"\x1\x56",
				"\x1\x57",
				"",
				"\x1\x58",
				"\x1\x59",
				"",
				"\x1\x11\x1C\xFFFF\x1A\x11\x4\xFFFF\x1\x11\x1\xFFFF\x1A\x11\x45\xFFFF"+
				"\x17\x11\x1\xFFFF\x1F\x11\x1\xFFFF\x1F08\x11\x1040\xFFFF\x150\x11\x170"+
				"\xFFFF\x80\x11\x80\xFFFF\x92E\x11\x10D2\xFFFF\x5200\x11\x5900\xFFFF"+
				"\x200\x11",
				"\x1\x5B",
				"\x1\x5C",
				"\x1\x11\x1C\xFFFF\x1A\x11\x4\xFFFF\x1\x11\x1\xFFFF\x1A\x11\x45\xFFFF"+
				"\x17\x11\x1\xFFFF\x1F\x11\x1\xFFFF\x1F08\x11\x1040\xFFFF\x150\x11\x170"+
				"\xFFFF\x80\x11\x80\xFFFF\x92E\x11\x10D2\xFFFF\x5200\x11\x5900\xFFFF"+
				"\x200\x11",
				"\x1\x11\x1C\xFFFF\x1A\x11\x4\xFFFF\x1\x11\x1\xFFFF\x1A\x11\x45\xFFFF"+
				"\x17\x11\x1\xFFFF\x1F\x11\x1\xFFFF\x1F08\x11\x1040\xFFFF\x150\x11\x170"+
				"\xFFFF\x80\x11\x80\xFFFF\x92E\x11\x10D2\xFFFF\x5200\x11\x5900\xFFFF"+
				"\x200\x11",
				"\x1\x11\x1C\xFFFF\x1A\x11\x4\xFFFF\x1\x11\x1\xFFFF\x1A\x11\x45\xFFFF"+
				"\x17\x11\x1\xFFFF\x1F\x11\x1\xFFFF\x1F08\x11\x1040\xFFFF\x150\x11\x170"+
				"\xFFFF\x80\x11\x80\xFFFF\x92E\x11\x10D2\xFFFF\x5200\x11\x5900\xFFFF"+
				"\x200\x11",
				"\x1\x60",
				"\x1\x61",
				"",
				"\x1\x11\x1C\xFFFF\x1A\x11\x4\xFFFF\x1\x11\x1\xFFFF\x1A\x11\x45\xFFFF"+
				"\x17\x11\x1\xFFFF\x1F\x11\x1\xFFFF\x1F08\x11\x1040\xFFFF\x150\x11\x170"+
				"\xFFFF\x80\x11\x80\xFFFF\x92E\x11\x10D2\xFFFF\x5200\x11\x5900\xFFFF"+
				"\x200\x11",
				"\x1\x63",
				"",
				"",
				"",
				"\x1\x11\x1C\xFFFF\x1A\x11\x4\xFFFF\x1\x64\x1\xFFFF\x1A\x11\x45\xFFFF"+
				"\x17\x11\x1\xFFFF\x1F\x11\x1\xFFFF\x1F08\x11\x1040\xFFFF\x150\x11\x170"+
				"\xFFFF\x80\x11\x80\xFFFF\x92E\x11\x10D2\xFFFF\x5200\x11\x5900\xFFFF"+
				"\x200\x11",
				"\x1\x66",
				"",
				"\x1\x67",
				"\x1\x68",
				"",
				"\x1\x69",
				"\x1\x11\x1C\xFFFF\x1A\x11\x4\xFFFF\x1\x11\x1\xFFFF\x1A\x11\x45\xFFFF"+
				"\x17\x11\x1\xFFFF\x1F\x11\x1\xFFFF\x1F08\x11\x1040\xFFFF\x150\x11\x170"+
				"\xFFFF\x80\x11\x80\xFFFF\x92E\x11\x10D2\xFFFF\x5200\x11\x5900\xFFFF"+
				"\x200\x11",
				"\x1\x6B",
				"\x1\x6C",
				"",
				"\x1\x6D",
				"\x1\x11\x1C\xFFFF\x1A\x11\x4\xFFFF\x1\x11\x1\xFFFF\x1A\x11\x45\xFFFF"+
				"\x17\x11\x1\xFFFF\x1F\x11\x1\xFFFF\x1F08\x11\x1040\xFFFF\x150\x11\x170"+
				"\xFFFF\x80\x11\x80\xFFFF\x92E\x11\x10D2\xFFFF\x5200\x11\x5900\xFFFF"+
				"\x200\x11",
				"\x1\x6F",
				"",
				"\x1\x11\x1C\xFFFF\x1A\x11\x4\xFFFF\x1\x11\x1\xFFFF\x1A\x11\x45\xFFFF"+
				"\x17\x11\x1\xFFFF\x1F\x11\x1\xFFFF\x1F08\x11\x1040\xFFFF\x150\x11\x170"+
				"\xFFFF\x80\x11\x80\xFFFF\x92E\x11\x10D2\xFFFF\x5200\x11\x5900\xFFFF"+
				"\x200\x11",
				""
			};

		private static readonly short[] DFA8_eot = DFA.UnpackEncodedString(DFA8_eotS);
		private static readonly short[] DFA8_eof = DFA.UnpackEncodedString(DFA8_eofS);
		private static readonly char[] DFA8_min = DFA.UnpackEncodedStringToUnsignedChars(DFA8_minS);
		private static readonly char[] DFA8_max = DFA.UnpackEncodedStringToUnsignedChars(DFA8_maxS);
		private static readonly short[] DFA8_accept = DFA.UnpackEncodedString(DFA8_acceptS);
		private static readonly short[] DFA8_special = DFA.UnpackEncodedString(DFA8_specialS);
		private static readonly short[][] DFA8_transition;

		static DFA8()
		{
			int numStates = DFA8_transitionS.Length;
			DFA8_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA8_transition[i] = DFA.UnpackEncodedString(DFA8_transitionS[i]);
			}
		}

		public DFA8( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 8;
			this.eot = DFA8_eot;
			this.eof = DFA8_eof;
			this.min = DFA8_min;
			this.max = DFA8_max;
			this.accept = DFA8_accept;
			this.special = DFA8_special;
			this.transition = DFA8_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( DATA | EXERCISE | EXERCISE_NAME | FLAGGED_SET | FLAGS | FORCED | MESSAGE | MULTI_SET | REP | RESULT | SET | SETS | SINGLE | WEIGHT | T__30 | T__31 | T__32 | T__33 | NUMBER | FLOAT | X | MAX | FTL | FR | TF | NOTE | WORD | WS );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

 
	#endregion

}

} // namespace PowerLog.Parser
